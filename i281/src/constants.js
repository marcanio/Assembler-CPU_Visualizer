/* GUI Values */
const CODE_MEM_WIDTH = 350;
const CODE_MEM_HEIGHT = 450;
const REGISTER_FILE_WIDTH = 350;
const REGISTER_FILE_HEIGHT = 500;


const MUX_POLYGON = [0,0, 50,30, 50,170, 0,200];
const ALU_POLYGON = [0,0, 100,75, 100,225, 0,300, 0,200, 25,150, 0,100 ];
const FLAGS_POLYGON = [0,0, 150,0, 150,100, 0,100];
const CODE_MEM_POLYGON = [0,0, CODE_MEM_WIDTH,0, CODE_MEM_WIDTH,CODE_MEM_HEIGHT, 0,CODE_MEM_HEIGHT];
const DATA_MEM_POLYGON = [0,0, 350,0, 350,450, 0,450];
const OPCODE_DECODER_POLYGON = [0,0, 200,0, 200,100, 0,100];
const CONTROL_POLYGON = [0,0, 550,0, 550,100, 0,100];
const REGISTER_FILE_POLYGON = [0,0, REGISTER_FILE_WIDTH,0, REGISTER_FILE_WIDTH,REGISTER_FILE_HEIGHT, 0,REGISTER_FILE_HEIGHT];
const PC_VALUE_POLYGON = [0,0, 200,0, 200,150, 0,150];
const PC_UPDATE_POLYGON = [0,0, 200,0, 200,150, 0,150];
const ARROW = [5,0, 10,0, 10, 40, 15, 40, 7.5,50, 0,40, 5,40];

const MUX_FALSE = [20, 60];
const MUX_TRUE = [20, 140];
const OPCODE_TPOS = [100, 30];


const MUX0_OFFSET = [900 , 650];
const MUX1_OFFSET = [1250, 600];
const MUX2_OFFSET = [1250, 950];
const MUX3_OFFSET = [2000, 800];
const MUX4_OFFSET = [500 , 1150];

const ALU_OFFSET = [1000, 500];
const FLAGS_OFFSET = [1300, 500];
const CODE_MEM_OFFSET = [100, 100];
const OPCODE_DECODER_OFFSET = [500, 100];
const CONTROL_OFFSET = [900, 100];
const REGISTER_FILE_OFFSET = [500, 500];
const PC_VALUE_OFFSET = [700, 1150];
const PC_UPDATE_OFFSET = [200, 1150];
const DATA_MEM_OFFSET = [1400, 900];

const READ_A_MUX_OFFSET = [REGISTER_FILE_OFFSET[0] + REGISTER_FILE_WIDTH * 0.75, REGISTER_FILE_OFFSET[1] + 50];
const READ_B_MUX_OFFSET = [REGISTER_FILE_OFFSET[0] + REGISTER_FILE_WIDTH * 0.75, REGISTER_FILE_OFFSET[1] + 300];

const MUX_ALU_WIRE = [0, 0, ALU_OFFSET[0] - (MUX0_OFFSET[0] + MUX_POLYGON[2]), 0];
const ALU_RESULT_WIRE = [0, 0, MUX1_OFFSET[0] - (ALU_OFFSET[0] + ALU_POLYGON[2]), 0];
const IMEM_DECODER_WIRE = [0, 0, OPCODE_DECODER_OFFSET[0] - (CODE_MEM_OFFSET[0] + CODE_MEM_WIDTH), 0];
const OPCODE_DECODER_CONTROL_WIRE = [0, 0, CONTROL_OFFSET[0] - (OPCODE_DECODER_OFFSET[0] + OPCODE_DECODER_POLYGON[2]), 0];
const ALU_FLAGS_WIRE = [0, 0, 200, -25];
const READ_A_WIRE = [0, 0, ALU_OFFSET[0] - (REGISTER_FILE_OFFSET[0] + REGISTER_FILE_WIDTH), 0];
const READ_B_WIRE = [0, 0, MUX0_OFFSET[0] - (REGISTER_FILE_OFFSET[0] + REGISTER_FILE_WIDTH), 0];
const PC_UPDATE_MUX_WIRE = [0, 0, MUX4_OFFSET[0] - (PC_UPDATE_OFFSET[0] + PC_UPDATE_POLYGON[2]), 0];
const MUX_PC_VALUE_WIRE = [0, 0, PC_VALUE_OFFSET[0] - (MUX4_OFFSET[0] + MUX_POLYGON[2]), 0];

const MUX_ALU_WIRE_OFFSET = [MUX0_OFFSET[0] + MUX_POLYGON[2], MUX0_OFFSET[1] + 100];
const ALU_RESULT_WIRE_OFFSET = [ALU_OFFSET[0] + ALU_POLYGON[2], ALU_OFFSET[1] + 150];
const IMEM_DECODER_WIRE_OFFSET = [CODE_MEM_OFFSET[0] + CODE_MEM_WIDTH, CODE_MEM_OFFSET[1] + 25];
const OPCODE_DECODER_CONTROL_WIRE_OFFSET = [OPCODE_DECODER_OFFSET[0] + OPCODE_DECODER_POLYGON[2], OPCODE_DECODER_OFFSET[1] + 25];
const ALU_FLAGS_WIRE_OFFSET = [ALU_OFFSET[0] + ALU_POLYGON[2], ALU_OFFSET[1] + 100];
const READ_A_WIRE_OFFSET = [REGISTER_FILE_WIDTH + REGISTER_FILE_OFFSET[0], REGISTER_FILE_OFFSET[1] + 50];
const READ_B_WIRE_OFFSET = [REGISTER_FILE_WIDTH + REGISTER_FILE_OFFSET[0], REGISTER_FILE_OFFSET[1] + 200];
const PC_UPDATE_MUX_FALSE_WIRE_OFFSET = [PC_UPDATE_OFFSET[0] + PC_UPDATE_POLYGON[2], PC_UPDATE_OFFSET[1] + 50];
const PC_UPDATE_MUX_TRUE_WIRE_OFFSET = [PC_UPDATE_OFFSET[0] + PC_UPDATE_POLYGON[2], PC_UPDATE_OFFSET[1] + 125];
const MUX_PC_VALUE_WIRE_OFFSET = [MUX4_OFFSET[0] + MUX_POLYGON[2], MUX4_OFFSET[1] + 100];

const IMEM_C1_OFFSET = [CODE_MEM_WIDTH/2 + CODE_MEM_OFFSET[0], CODE_MEM_OFFSET[0] - ARROW[9]];
const MUX_C2_OFFSET = [MUX4_OFFSET[0] + 20, MUX4_OFFSET[1] + (15 - ARROW[9])];
const PC_VALUE_C3_OFFSET = [PC_VALUE_POLYGON[2]/2 + PC_VALUE_OFFSET[0], PC_VALUE_OFFSET[1] - ARROW[9]];
const READ_A_C4_OFFSET = [READ_A_MUX_OFFSET[0] + 15, READ_A_MUX_OFFSET[1] + (10-ARROW[9])];
const READ_A_C5_OFFSET = [READ_A_MUX_OFFSET[0] + 40, READ_A_MUX_OFFSET[1] + (20-ARROW[9])];
const READ_B_C6_OFFSET = [READ_B_MUX_OFFSET[0] + 15, READ_B_MUX_OFFSET[1] + (10-ARROW[9])];
const READ_B_C7_OFFSET = [READ_B_MUX_OFFSET[0] + 40, READ_B_MUX_OFFSET[1] + (20-ARROW[9])];
const REG_FILE_C8_OFFSET = [REGISTER_FILE_OFFSET[0] + 1 * 30, REGISTER_FILE_OFFSET[1] - ARROW[9]];
const REG_FILE_C9_OFFSET = [REGISTER_FILE_OFFSET[0] + 2 * 30, REGISTER_FILE_OFFSET[1] - ARROW[9]];
const REG_FILE_C10_OFFSET = [REGISTER_FILE_OFFSET[0] + 3 * 30, REGISTER_FILE_OFFSET[1] - ARROW[9]];
const MUX_C11_OFFSET = [MUX0_OFFSET[0] + 20, MUX0_OFFSET[1] + (15 - ARROW[9])];
const ALU_C12_OFFSET = [ALU_OFFSET[0] + 1 * 25, ALU_OFFSET[1] - ARROW[9]];
const ALU_C13_OFFSET = [ALU_OFFSET[0] + 2 * 25, ALU_OFFSET[1] - ARROW[9]];
const FLAGS_C14_OFFSET = [FLAGS_POLYGON[2]/2 + FLAGS_OFFSET[0], FLAGS_OFFSET[1] - ARROW[9]];
const MUX_C15_OFFSET = [MUX1_OFFSET[0] + 20, MUX1_OFFSET[1] + (15 - ARROW[9])];
const MUX_C16_OFFSET = [MUX2_OFFSET[0] + 20, MUX2_OFFSET[1] + (15 - ARROW[9])];
const DMEM_C17_OFFSET = [DATA_MEM_POLYGON[2]/2 + DATA_MEM_OFFSET[0], DATA_MEM_OFFSET[1] - ARROW[9]];
const MUX_C18_OFFSET = [MUX3_OFFSET[0] + 20, MUX3_OFFSET[1] + (15 - ARROW[9])];

const CONTROL_ARROW_OFFSET = [CONTROL_OFFSET[0], CONTROL_OFFSET[1] + CONTROL_POLYGON[7]];

const ARROW_DIST_BETWEEN = 28;


const MUX_FALSE_TEXT = "0";
const MUX_TRUE_TEXT = "1";
const OPCODE_TEXT = "Opcode Decoder";


const BLOCK_STYLE = " fill:white; stroke:black; stroke-width:2px;";
const WIRE_STYLE = "stroke:black; stroke-width:2px;";
const ARROW_STYLE = " fill:black; stroke:black; stroke-width:1px;";
const TEXT_STYLE = "font-family: Arial, Helvetica, sans-serif; font-size: 24px; text-anchor:middle; fill:black;";

const ID_ATTR = "id";
const STYLE_ATTR = "style";
// TODO create id tags for all components
const MUX0_ID = "mux0";
const MUX0_FALSE_ID = "mux0_false";
const MUX0_TRUE_ID = "mux0_true";
const MUX1_ID = "mux1";
const MUX1_FALSE_ID = "mux1_false";
const MUX1_TRUE_ID = "mux1_true";
const MUX2_ID = "mux2";
const MUX2_FALSE_ID = "mux2_false";
const MUX2_TRUE_ID = "mux2_true";
const MUX3_ID = "mux3";
const MUX3_FALSE_ID = "mux3_false";
const MUX3_TRUE_ID = "mux3_true";
const MUX4_ID = "mux4";
const MUX4_FALSE_ID = "mux4_false";
const MUX4_TRUE_ID = "mux4_true";

const ALU_ID = "alu";

const CONTROL_C1 = "control_c1";
const CONTROL_C2 = "control_c2";
const CONTROL_C3 = "control_c3";
const CONTROL_C4 = "control_c4";
const CONTROL_C5 = "control_c5";
const CONTROL_C6 = "control_c6";
const CONTROL_C7 = "control_c7";
const CONTROL_C8 = "control_c8";
const CONTROL_C9 = "control_c9";
const CONTROL_C10 = "control_c10";
const CONTROL_C11 = "control_c11";
const CONTROL_C12 = "control_c12";
const CONTROL_C13 = "control_c13";
const CONTROL_C14 = "control_c14";
const CONTROL_C15 = "control_c15";
const CONTROL_C16 = "control_c16";
const CONTROL_C17 = "control_c17";
const CONTROL_C18 = "control_c18";



export {
	MUX_POLYGON,
	ALU_POLYGON,
	FLAGS_POLYGON, 
	CODE_MEM_POLYGON, 
	DATA_MEM_POLYGON, 
	OPCODE_DECODER_POLYGON, 
	CONTROL_POLYGON, 
	REGISTER_FILE_POLYGON, 
	PC_VALUE_POLYGON, 
	PC_UPDATE_POLYGON, 
	ARROW,
	MUX_FALSE,
	MUX_TRUE,
	OPCODE_TPOS,
	MUX0_OFFSET,
	MUX1_OFFSET,
	MUX2_OFFSET,
	MUX3_OFFSET,
	MUX4_OFFSET,
	ALU_OFFSET,
	FLAGS_OFFSET,
	CODE_MEM_OFFSET,
	OPCODE_DECODER_OFFSET,
	CONTROL_OFFSET,
	REGISTER_FILE_OFFSET,
	PC_VALUE_OFFSET,
	PC_UPDATE_OFFSET,
	DATA_MEM_OFFSET,
	READ_A_MUX_OFFSET,
	READ_B_MUX_OFFSET,
	MUX_ALU_WIRE,
	ALU_RESULT_WIRE,
	IMEM_DECODER_WIRE,
	OPCODE_DECODER_CONTROL_WIRE,
	ALU_FLAGS_WIRE,
	READ_A_WIRE,
	READ_B_WIRE,
	PC_UPDATE_MUX_WIRE,
	MUX_PC_VALUE_WIRE,
	MUX_ALU_WIRE_OFFSET,
	ALU_RESULT_WIRE_OFFSET,
	IMEM_DECODER_WIRE_OFFSET,
	OPCODE_DECODER_CONTROL_WIRE_OFFSET,
	ALU_FLAGS_WIRE_OFFSET,
	READ_A_WIRE_OFFSET,
	READ_B_WIRE_OFFSET,
	PC_UPDATE_MUX_FALSE_WIRE_OFFSET,
	PC_UPDATE_MUX_TRUE_WIRE_OFFSET,
	MUX_PC_VALUE_WIRE_OFFSET,
	IMEM_C1_OFFSET,
	MUX_C2_OFFSET,
	PC_VALUE_C3_OFFSET,
	READ_A_C4_OFFSET,
	READ_A_C5_OFFSET,
	READ_B_C6_OFFSET,
	READ_B_C7_OFFSET,
	REG_FILE_C8_OFFSET,
	REG_FILE_C9_OFFSET,
	REG_FILE_C10_OFFSET,
	MUX_C11_OFFSET,
	ALU_C12_OFFSET,
	ALU_C13_OFFSET,
	FLAGS_C14_OFFSET,
	MUX_C15_OFFSET,
	MUX_C16_OFFSET,
	DMEM_C17_OFFSET,
	MUX_C18_OFFSET,
	CONTROL_ARROW_OFFSET,
	ARROW_DIST_BETWEEN,
	MUX_FALSE_TEXT,
	MUX_TRUE_TEXT,
	OPCODE_TEXT,
	BLOCK_STYLE,
	WIRE_STYLE,
	ARROW_STYLE,
	TEXT_STYLE,
	ID_ATTR,
	STYLE_ATTR,
	MUX0_ID,
	MUX0_FALSE_ID,
	MUX0_TRUE_ID,
	MUX1_ID,
	MUX1_FALSE_ID,
	MUX1_TRUE_ID,
	MUX2_ID,
	MUX2_FALSE_ID,
	MUX2_TRUE_ID,
	MUX3_ID,
	MUX3_FALSE_ID,
	MUX3_TRUE_ID,
	MUX4_ID,
	MUX4_FALSE_ID,
	MUX4_TRUE_ID,
	ALU_ID,
	CONTROL_C1,
	CONTROL_C2,
	CONTROL_C3,
	CONTROL_C4,
	CONTROL_C5,
	CONTROL_C6,
	CONTROL_C7,
	CONTROL_C8,
	CONTROL_C9,
	CONTROL_C10,
	CONTROL_C11,
	CONTROL_C12,
	CONTROL_C13,
	CONTROL_C14,
	CONTROL_C15,
	CONTROL_C16,
	CONTROL_C17,
	CONTROL_C18
};